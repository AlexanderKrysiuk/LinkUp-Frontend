{
    // Place your epg-clientApp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
    // Placeholders with the same ids are connected.
    // Example:
    // "Print to console": {
    // 	"scope": "javascript,typescript",
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }

    "test-react": {
        "isFileTemplate": true,
        "scope": "typescriptreact",
        "prefix": "rtest",
        "description": "Testing boilerplate for React components",
        "body": [
            "import { render, screen } from '@testing-library/react';",
            "import React from 'react';",
            "",
            "import $1Component from '../src/components/$1';",
            "",
            "it('$2', ($3) => {",
            "    render(<$1Component />);",
            "    const $5 = screen.${6:queryByText(/Hello/i)};",
            "    expect($5).${7:toBeVisible()};",
            "});"
        ]
    },
    "functional-component": {
        "isFileTemplate": true,
        "scope": "typescriptreact",
        "prefix": "fcomp",
        "description": "Functional component boilerplate for *.tsx files",
        "body": [
            "import React, {${1:, useState}${2:, useEffect} } from 'react';",
            "",
            "interface ${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}Props {",
            "    ${4:variable and type}",
            "};",
            "",
            "const ${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}Component = ({ ${5:variables} }: ${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}Props ): JSX.Element => {",
            "    return(",
            "        <$6>",
            "            $0",
            "        </$6>",
            "    )",
            "}",
            "",
            "export default ${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}Component"
        ]
    },
    "class-component": {
        "isFileTemplate": true,
        "scope": "typescriptreact",
        "prefix": "ccomp",
        "description": "Class component boilerplate for *.tsx files",
        "body": [
            "import React, { Component } from 'react';",
            "",
            "type ${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}Props = {",
            "    ${2:variable and type}",
            "}",
            "",
            "type ${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}State = {",
            "    ${2:variable and type}",
            "};",
            "",
            "class ${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/} extends Component<${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}Props, ${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}State> {",
            "    $3($4) {",
            "        this.setState({",
            "            $5: new $6()",
            "        });",
            "    };",
            "    componentWillMount() {",
            "        this.$3();",
            "    };",
            "    ",
            "    componentDidMount() {",
            "        this.$3();",
            "    };",
            "    ",
            "    render() {",
            "        return (",
            "            <$7>",
            "                $0",
            "            </$7>",
            "        )",
            "    };",
            "}",
            "export default ${TM_FILENAME_BASE/(.*)$/${1:/capitalize}/}"
        ]
    }
}
